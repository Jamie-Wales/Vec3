{
  "scopeName": "source.vec3",
  "name": "Vec3",
  "fileTypes": [
    "vec3"
  ],
  "patterns": [
    {
      "name": "comment.line.double-slash",
      "match": "//.*$"
    },
    {
      "name": "keyword.control",
      "match": "\\b(let|if|else|module|open|in|for|while|return|match|with)\\b"
    },
    {
      "name": "storage.type",
      "match": "\\b(int|float|string|bool|unit|never|any|Type|Expr|Stmt|Program)\\b"
    },
    {
      "name": "constant.numeric.float",
      "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
    },
    {
      "name": "constant.numeric.integer",
      "match": "\\b\\d+\\b"
    },
    {
      "name": "constant.language.boolean",
      "match": "\\b(true|false)\\b"
    },
    {
      "name": "string.quoted.double",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "keyword.operator",
      "match": "\\+|\\-|\\*|\\/|\\=|\\>|\\<|\\!|\\?|\\:|\\,|\\;|\\.|\\(|\\)|\\{|\\}|\\[|\\]"
    },
    {
      "name": "entity.name.function",
      "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
    },
    {
      "name": "entity.name.type",
      "match": "\\b([A-Z][a-zA-Z0-9_]*)\\b"
    },
    {
      "name": "variable.other",
      "match": "\\b([a-z][a-zA-Z0-9_]*)\\b"
    },
    {
      "name": "keyword.other",
      "match": "\\b(TInfer|TInteger|TFloat|TRational|TComplex|TBool|TString|TUnit|TNever|TAny|TFunction|TTypeVariable|TConstrain|TTuple|TList|TVector|TMatrix|Constraint)\\b"
    },
    {
      "name": "meta.module",
      "match": "\\bmodule\\s+([A-Z][a-zA-Z0-9_.]*)\\b",
      "captures": {
        "1": {
          "name": "entity.name.module"
        }
      }
    },
    {
      "name": "meta.type",
      "match": "\\btype\\s+([A-Z][a-zA-Z0-9_]*)\\s*=",
      "captures": {
        "1": {
          "name": "entity.name.type"
        }
      }
    },
    {
      "name": "meta.function",
      "begin": "\\blet\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*\\(",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function"
        }
      },
      "end": "\\)",
      "patterns": [
        {
          "name": "variable.parameter",
          "match": "[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "storage.type.parameter",
          "match": ":\\s*(int|float|string|bool|unit|never|any|Type|Expr|Stmt|Program)"
        },
        {
          "name": "keyword.operator.type",
          "match": "->"
        }
      ]
    }
  ],
  "repository": {},
  "extensions": [
    ".vec3"
  ],
  "foldingStartMarker": "^\\s*(module|let|if|for|while|match|with|open)\\b",
  "foldingStopMarker": "^\\s*\\}"
}
