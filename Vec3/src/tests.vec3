// arithmetic tests
assert 1 + 1 == 2, "Addition failed"
assert 1 - 1 == 0, "Subtraction failed"
assert 1 * 1 == 1, "Multiplication failed"
assert 1 / 1 == 1, "Division failed"
assert 1 % 1 == 0, "Modulus failed"
assert 1 ^ 1 == 1, "Exponentiation failed"
assert 1 == 1, "Equality failed"
assert 1 != 2, "Inequality failed"
assert 1 < 2, "Less than failed"
assert 1 <= 2, "Less than or equal failed"
assert 2 > 1, "Greater than failed"
assert 2 >= 1, "Greater than or equal failed"

assert true && true, "And failed"
assert true || false, "Or failed"
assert !false, "Not failed"

// list tests
assert [1, 2, 3] == [1, 2, 3], "List equality failed"
assert [1, 2, 3] != [1, 2, 4], "List inequality failed"
assert [1, 2, 3] ++ [4, 5, 6] == [1, 2, 3, 4, 5, 6], "List concatenation failed"
assert [1, 2, 3][0] == 1, "List indexing failed"
assert len([1, 2, 3]) == 3, "List length failed"
assert head([1, 2, 3]) == 1, "List head failed"
assert tail([1, 2, 3]) == [2, 3], "List tail failed"
assert fold([1, 2, 3], 0, (x, y) -> x + y) == 6, "List fold failed"
assert map([1, 2, 3], (x) -> x + 1) == [2, 3, 4], "List map failed"
assert sum([1, 2, 3]) == 6, "List sum failed"
assert product([1, 2, 3]) == 6, "List product failed"
assert any([false, false, true]) == true, "List any failed"
assert all([true, true, false]) == false, "List all failed"
assert anyAre([1, 2, 3], (x) -> x == 2) == true, "List anyAre failed"
assert allAre([1, 2, 3], (x) -> x == 2) == false, "List allAre failed"
assert filter([1, 2, 3], (x) -> x == 2) == [2], "List filter failed"

// math tests
assert sqrt(4) == 2, "Square root failed"
assert cubeRoot(8) == 2, "Cube root failed"
assert max(1, 2) == 2, "Max failed"
assert min(1, 2) == 1, "Min failed"
assert id(1) == 1, "Identity failed"
