
// functions can be typed for little to know inference
let add = (a: int, b: int) -> a + b

// return type is inferred, but can be typed if desired
let addInts = (a: int, b: int): int -> a + b

// single param functions can be inferred
// for example, as 1 is an int, and + is of type TConstrain[int, float, ...]
// the type of a is inferred to be int, and the return type is inferred to be int
let add1 = (a) -> a + 1

// a is inferred to be TConstrain[int, float, ...], as plus operator is of type TConstrain[int, float, ...]
// however, first call will define the type of a, and therefore the return type
// forever
let double = (a) -> a + a

// the type of x is inferred to be a (type variable), therefore generic to all types
let id = (x) -> x

// any type is available, but at the cost of type safety
let unsafe = (a: any, b: any) -> a + b

// future !!!!! once type inference is improved, this will be possible (hopefully)
// let addT = (x: a: (int, float)], x: a: (int, float)) -> a + b

// functions can also be defined as so
let add2 = (a: int, b: int) -> {
    a + b
}

// or more consice (no arrow)
let add2 = (a: int, b: int) {
    a + b
}

// the concrete type isnt decided until the first call (subject to change)
let addTwoNums = (a, b) -> a + b